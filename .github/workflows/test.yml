name: 암호화폐 분석 프로젝트 테스트

# 트리거 설정
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # 매일 UTC 00:00 (한국시간 09:00)에 실행
    - cron: '0 0 * * *'

# 환경 변수
env:
  PYTHON_VERSION: '3.9'
  TESTING: 'true'

jobs:
  # 린트 및 정적 분석
  lint:
    name: 린트 및 정적 분석
    runs-on: ubuntu-latest

    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4

    - name: Python 설정
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 의존성 캐시
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-lint-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-lint-
          ${{ runner.os }}-pip-

    - name: 린트 도구 설치
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black mypy

    - name: 코드 포맷팅 검사 (Black)
      run: |
        black --check --diff src/ utils/ config/ tests/

    - name: 린트 검사 (Flake8)
      run: |
        flake8 src/ utils/ config/ tests/ --max-line-length=88 --extend-ignore=E203,W503

    - name: 타입 검사 (MyPy)
      run: |
        mypy src/ utils/ config/ --ignore-missing-imports

  # 단위 테스트
  unit-tests:
    name: 단위 테스트
    runs-on: ubuntu-latest
    needs: lint

    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']

    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4

    - name: Python ${{ matrix.python-version }} 설정
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: 의존성 캐시
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: 의존성 설치
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r tests/requirements-test.txt

    - name: 단위 테스트 실행
      run: |
        python -m pytest tests/unit/ -v --tb=short --cov=src --cov=utils --cov=config

    - name: 커버리지 업로드
      if: matrix.python-version == '3.9'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # 통합 테스트
  integration-tests:
    name: 통합 테스트
    runs-on: ubuntu-latest
    needs: unit-tests

    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4

    - name: Python 설정
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 의존성 설치
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r tests/requirements-test.txt

    - name: 통합 테스트 실행
      run: |
        python -m pytest tests/integration/ -v --tb=short
      env:
        # API 호출 제한을 위한 환경 변수
        API_RATE_LIMIT: '1'
        API_TIMEOUT: '10'

  # E2E 테스트
  e2e-tests:
    name: E2E 테스트
    runs-on: ubuntu-latest
    needs: integration-tests

    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4

    - name: Python 설정
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 의존성 설치
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r tests/requirements-test.txt

    - name: E2E 테스트 실행
      run: |
        python -m pytest tests/e2e/ -v --tb=short --durations=10
      env:
        # E2E 테스트를 위한 환경 변수
        E2E_TESTING: 'true'
        API_RATE_LIMIT: '0.5'

  # 성능 테스트 (선택적)
  performance-tests:
    name: 성능 테스트
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[perf]')
    needs: e2e-tests

    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4

    - name: Python 설정
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 의존성 설치
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r tests/requirements-test.txt

    - name: 성능 테스트 실행
      run: |
        python -m pytest tests/ -v --tb=short -m slow --benchmark-only

    - name: 벤치마크 결과 업로드
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: tests/benchmark_results.json

  # 전체 테스트 결과 요약
  test-summary:
    name: 테스트 결과 요약
    runs-on: ubuntu-latest
    needs: [lint, unit-tests, integration-tests, e2e-tests]
    if: always()

    steps:
    - name: 테스트 결과 확인
      run: |
        echo "🧪 테스트 결과 요약"
        echo "==================="
        echo "린트: ${{ needs.lint.result }}"
        echo "단위 테스트: ${{ needs.unit-tests.result }}"
        echo "통합 테스트: ${{ needs.integration-tests.result }}"
        echo "E2E 테스트: ${{ needs.e2e-tests.result }}"

        if [[ "${{ needs.lint.result }}" == "success" &&
              "${{ needs.unit-tests.result }}" == "success" &&
              "${{ needs.integration-tests.result }}" == "success" &&
              "${{ needs.e2e-tests.result }}" == "success" ]]; then
          echo "✅ 모든 테스트 통과!"
          exit 0
        else
          echo "❌ 일부 테스트 실패"
          exit 1
        fi

  # 보안 스캔 (선택적)
  security-scan:
    name: 보안 스캔
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4

    - name: Python 설정
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 보안 도구 설치
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit

    - name: 의존성 보안 검사
      run: |
        safety check --json --output safety-report.json || true

    - name: 코드 보안 검사
      run: |
        bandit -r src/ utils/ config/ -f json -o bandit-report.json || true

    - name: 보안 리포트 업로드
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json